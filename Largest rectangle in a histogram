#include<bits/stdc++.h>
vector<int> NSR(vector < int > & heights){
    int n=heights.size();
    vector<int>right;
    stack<pair<int,int>>st;
    for(int i=n-1;i>=0;i--){
        if(st.size()==0)
            right.push_back(-1);
        else if(st.size()>0&&st.top().first<heights[i]){
            right.push_back(st.top().second);
        }
        else if(st.size()>0&&st.top().first>=heights[i]){
            while(st.size()>0&&st.top().first>=heights[i])
                st.pop();
            if(st.size()==0)
                right.push_back(-1);
            else
                right.push_back(st.top().second);
        }
        st.push({heights[i],i});
    }
    reverse(right.begin(),right.end());
    return right;
}
vector<int> NSL(vector < int > & heights){
    int n=heights.size();
    vector<int>left;
    stack<pair<int,int>>st;
    for(int i=0;i<n;i++){
        if(st.size()==0)
            left.push_back(-1);
        else if(st.size()>0&&st.top().first<heights[i])
            left.push_back(st.top().second);
        else if(st.size()>0&&st.top().first>=heights[i]){
            while(st.size()>0&&st.top().first>=heights[i])
                st.pop();
            if(st.size()==0)
                left.push_back(-1);
            else
                left.push_back(st.top().second);
        }
        st.push({heights[i],i});
    }
    return left;
}
int largestRectangle(vector < int > & heights) {
     vector<int>r=NSR(heights);
     vector<int>l=NSL(heights);
     int area=INT_MIN;
     for(int i=0;i<heights.size();i++){
         int len=heights[i];
         if(r[i]==-1)
             r[i]=heights.size();
         int b=r[i]-l[i]-1;
         int newArea=len*b;
         area=max(area,newArea);
     }
    return area;
 }
